# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import comment_pb2 as comment__pb2
import common_pb2 as common__pb2


class CommentStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Get = channel.unary_unary(
                '/internal_api.Comment/Get',
                request_serializer=comment__pb2.CommentRequest.SerializeToString,
                response_deserializer=comment__pb2.CommentResponse.FromString,
                )
        self.GetMany = channel.unary_unary(
                '/internal_api.Comment/GetMany',
                request_serializer=comment__pb2.GetManyRequest.SerializeToString,
                response_deserializer=comment__pb2.GetManyResponse.FromString,
                )
        self.Create = channel.unary_unary(
                '/internal_api.Comment/Create',
                request_serializer=comment__pb2.CommentCreateRequest.SerializeToString,
                response_deserializer=common__pb2.StatusResponse.FromString,
                )
        self.GetReaction = channel.unary_unary(
                '/internal_api.Comment/GetReaction',
                request_serializer=common__pb2.ReactionRequest.SerializeToString,
                response_deserializer=common__pb2.ReactionResponse.FromString,
                )
        self.UpdateReaction = channel.unary_unary(
                '/internal_api.Comment/UpdateReaction',
                request_serializer=common__pb2.UpdateReactionRequest.SerializeToString,
                response_deserializer=common__pb2.StatusResponse.FromString,
                )
        self.Delete = channel.unary_unary(
                '/internal_api.Comment/Delete',
                request_serializer=comment__pb2.CommentRequest.SerializeToString,
                response_deserializer=common__pb2.StatusResponse.FromString,
                )


class CommentServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMany(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetReaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateReaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CommentServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=comment__pb2.CommentRequest.FromString,
                    response_serializer=comment__pb2.CommentResponse.SerializeToString,
            ),
            'GetMany': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMany,
                    request_deserializer=comment__pb2.GetManyRequest.FromString,
                    response_serializer=comment__pb2.GetManyResponse.SerializeToString,
            ),
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=comment__pb2.CommentCreateRequest.FromString,
                    response_serializer=common__pb2.StatusResponse.SerializeToString,
            ),
            'GetReaction': grpc.unary_unary_rpc_method_handler(
                    servicer.GetReaction,
                    request_deserializer=common__pb2.ReactionRequest.FromString,
                    response_serializer=common__pb2.ReactionResponse.SerializeToString,
            ),
            'UpdateReaction': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateReaction,
                    request_deserializer=common__pb2.UpdateReactionRequest.FromString,
                    response_serializer=common__pb2.StatusResponse.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=comment__pb2.CommentRequest.FromString,
                    response_serializer=common__pb2.StatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'internal_api.Comment', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Comment(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/internal_api.Comment/Get',
            comment__pb2.CommentRequest.SerializeToString,
            comment__pb2.CommentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/internal_api.Comment/GetMany',
            comment__pb2.GetManyRequest.SerializeToString,
            comment__pb2.GetManyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/internal_api.Comment/Create',
            comment__pb2.CommentCreateRequest.SerializeToString,
            common__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetReaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/internal_api.Comment/GetReaction',
            common__pb2.ReactionRequest.SerializeToString,
            common__pb2.ReactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateReaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/internal_api.Comment/UpdateReaction',
            common__pb2.UpdateReactionRequest.SerializeToString,
            common__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/internal_api.Comment/Delete',
            comment__pb2.CommentRequest.SerializeToString,
            common__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
